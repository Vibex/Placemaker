#!/bin/bash
####
#### PLACEMAKER
####
## placemaker is a window manipulation tool
##
## Requires Xorg, wmutils/core, wmutils/opt
##
## Optional mkwm


####
#### LIVE VARIABLES
####
## These can be altered by arguments and during runtime

# X position of the monitor
GX0=$(wattr x $(lsw -r))

# Y position of the monitor
GY0=$(wattr y $(lsw -r))

# Width of the monitor
GX1=$(wattr w $(lsw -r))

# Height of the monitor
GY1=$(wattr h $(lsw -r))

# Gap applied to the windows requested geometry and displayed geometry
GAP=0

# Are all requested window geometries mirrored on the x axis
# 0 = False
# 1 = True
MIRROR=0

# Are all requested window geometries flipped on the y axis
# 0 = False
# 1 = True
FLIP=0

# Is 'wattr b wid' not used when position window
# 0 = False
# 1 = True
IGNOREB=0

# Does placemaker print the adjutments to stdout instead of moving windows
# 0 = False
# 1 = True
PRINT=0

# Does placemaker only print errors
# 0 = False
# 1 = True
QUIET=0

# Are positions autosaved
# 0 = False
# 1 = True
AUTOSAVE=0

# What atom are autosaves made to
SAVE="PLACEMAKER_SAVE"

####
#### FUNCTIONS
####

# Update the geometry to work within
# Arugments are either an int or ' c '
# If an int, than set that value
# If ' c ' than the value is not updated
# Arguments: x0 y0 x1 y1
fn_geometry() {
	[[ "$1" != "c" ]] && GX0=$1
	[[ "$2" != "c" ]] && GY0=$2
	[[ "$3" != "c" ]] && GX1=$3
	[[ "$4" != "c" ]] && GY1=$4
}

# Save a windows at geometry
# An ATOM is any string that does not start with the characters "0x"
# Arguments: ATOM X Y W H WID
fn_saveWidAt() {
	atomx "$1"="$2 $3 $4 $5" $6 > /dev/null
}

# Save a windows current position
# An ATOM is any string that does not start with the characters "0x"
# Arguments: [ATOM] WID
fn_saveWid() {
	local atom="$1"
	[[ "$atom" == "0x"* || "$atom" == "--erase" ]] && atom="$SAVE" || shift 1
	
	# Get wid
	local wid="$1"

	# Get starting geometry
	local nx=$(fn_getAttribute "x" "$wid")
	local ny=$(fn_getAttribute "y" "$wid")
	local nw=$(fn_getAttribute "w" "$wid")
	local nh=$(fn_getAttribute "h" "$wid")
	fn_saveWidAt "$atom" "$nx" "$ny" "$nw" "$nh" "$wid"
}

# Restore a window to a saved position
# ATOM definition with fn_saveWidAt
# Arguments: [ATOM] [--erase] WID
fn_restoreWid() {
	local atom="$1"
	[[ "$atom" == "0x"* || "$atom" == "--erase" ]] && atom="$SAVE" || shift 1
	
	local erase=0
	[[ "$1" == "--erase" ]] && erase=1 && shift 1
	
	# Get wid
	local wid="$1"
	
	wtp $(atomx "$atom" "$wid") "$wid"
	[[ "$erase" -eq 1 ]] && atomx "$atom"="" "$wid"
}

# Get an attribute for the given window
# This is just a left over from when there were other attribute retrieval methods
# Attributes are:
# x = x
# y = y
# w = width
# h = height
# b = border
# o = override_redirect
# m = map
# Arguments: attribute wid
fn_getAttribute() {
	local wid=$(echo "$2" | cut -d + -f 1)
	wattr "$1" "$wid"
}

# Teleport a window to a given position and size
# A wid is an id or an 'id+adjust...'
# Examples:
# 0x00000000
# 0x00000000+10,20,-10,-20		Adjust geometry
# 0x00000000+upperleft			Adjust position (takes any S_DIR)
# 0x00000000+mirror 			Toggle mirror
# 0x00000000+flip				Toggle flip
# 0x00000000+W=100				Set geometry [X|Y|W|H]=integer
# 0x00000000+0x00000001			Change targeted wid
# x, y, w, or h are either an int or ' c '
# If an int, than set that value
# If ' c ' than the value is not updated
# Arguments: x y w h wid
fn_teleportWid() {
	# Set defaults for adjust options
	local ox=0
	local oy=0
	local ow=0
	local oh=0
	local ap=""
	local am=$MIRROR
	local af=$FLIP
	local ovx=""
	local ovy=""
	local ovw=""
	local ovh=""

	# Deal with adjust options
	for a in $(echo "$5" | tr "+" " "); do
		# Wid adjust (this also sets the original wid
		if [[ "$a" == "0x"* ]]; then
			local wid=$a
		# Geometry adjust (these can be stacked indefinitely)
		elif [[ "$a" == *","* ]]; then
			local tox=$(echo "$a" | cut -d , -f 1)
			local toy=$(echo "$a" | cut -d , -f 2)
			local tow=$(echo "$a" | cut -d , -f 3)
			local toh=$(echo "$a" | cut -d , -f 4)
			ox=$(( $tox + $ox ))
			oy=$(( $toy + $oy ))
			ow=$(( $tow + $ow ))
			oh=$(( $toh + $oh ))
		# Reflect adjust (mirror toggle)
		elif [[ "$a" == "mirror" ]]; then
			[[ "$am" -eq 0 ]] && am=1 || am=0
		# Reflect adjust (flip toggle)
		elif [[ "$a" == "flip" ]]; then
			[[ "$af" -eq 0 ]] && af=1 || af=0
		# Override adjust
		elif [[ "$a" == *"="* ]]; then
			local aa=$(echo "$a" | cut -d "=" -f 1)
			local ab=$(echo "$a" | cut -d "=" -f 2)
			if [[ "$aa" == "x" ]]; then
				[[ "$ab" != "c" ]] && ovx=$ab
			elif [[ "$aa" == "y" ]]; then
				[[ "$ab" != "c" ]] && ovy=$ab
			elif [[ "$aa" == "w" ]]; then
				[[ "$ab" != "c" ]] && ovw=$ab
			elif [[ "$aa" == "h" ]]; then
				[[ "$ab" != "c" ]] && ovh=$ab
			else
				echo "$a is not a valid override adjust" && exit
			fi
		# Position adjust
		else
			ap="$a"
		fi
	done
	
	# Check if x,y,w,h are c and if they are make them the current value
	# If they aren't adjust them accordingly
	local nx=0 && local ny=0 && local nw=0 && local nh=0 && local bor=0
	[[ "$IGNOREB" -eq 1 ]] && bor=0 || bor=$(fn_getAttribute "b" "$wid") 
	[[ "$1" != "c" ]] && nx=$(( $1 + $GAP )) || nx=$(fn_getAttribute "x" "$wid")
	[[ "$2" != "c" ]] && ny=$(( $2 + $GAP )) || ny=$(fn_getAttribute "y" "$wid")
	[[ "$3" != "c" ]] && nw=$(( $3 - $GAP - $GAP - $bor - $bor )) || nw=$(fn_getAttribute "w" "$wid")
	[[ "$4" != "c" ]] && nh=$(( $4 - $GAP - $GAP - $bor - $bor )) || nh=$(fn_getAttribute "h" "$wid")
	local oaw=$nw
	local oah=$nh

	# Mirror if set
	[[ $am -eq 1 ]] && nx=$(( $GX1 - ( $nx + $nw ) + $GX0 - ($bor * 2) ))
	# Flip if set
	[[ $af -eq 1 ]] && ny=$(( $GY1 - ( $ny + $nh ) + $GY0 - ($bor * 2) ))

	# Alter sizing with adjustments
	nx=$(( $nx + $ox ))
	ny=$(( $ny + $oy ))
	nw=$(( $nw + $ow ))
	nh=$(( $nh + $oh ))

	# Move, save, and print the window
	if [[ "$ap" == "" ]]; then
		[[ "$ovx" != "" ]] && nx=$ovx
		[[ "$ovy" != "" ]] && ny=$ovy
		[[ "$ovw" != "" ]] && nw=$ovw
		[[ "$ovh" != "" ]] && nh=$ovh
		[[ "$PRINT" -eq 0 ]] && wtp $nx $ny $nw $nh $wid 
		[[ "$AUTOSAVE" -eq 1 ]] && fn_saveWidAt $SAVE $nx $ny $nw $nh $wid 
		[[ "$QUIET" -eq 0 ]] && echo "$nx $ny $nw $nh $wid"
	# A position adjustment was set, than position it
	else
		local tgap=$GAP && GAP=0
		local tib=$IGNOREB && IGNOREB=1
		local tm=$MIRROR && MIRROR=0
		local tf=$FLIP && FLIP=0
		[[ "$ovw" != "" ]] && local sw=$ovw || local sw=$oaw
		[[ "$ovh" != "" ]] && local sh=$ovh || local sh=$oah
		fn_slamWidGeometry "$ap" "$nx" "$ny" "$(( $nw + $nx ))" "$(( $nh + $ny ))" "0" $sw $sh "$wid+w=$sw+h=$sh" 
		GAP=$tgap
		IGNOREB=$tib
		MIRROR=$tm
		FLIP=$tf
	fi
}

# Scale a windows size by a percentage
# Arguments: percent wid
fn_scaleWid() {
	# Parse arguments
	local wid="$2"
	local growth=$(echo "$1" | cut -d "%" -f 1)
	
	# Get starting geometry
	local nw=$(fn_getAttribute "w" "$wid")
	local nh=$(fn_getAttribute "h" "$wid")
	
	nw=$(( ($nw * $growth) / 100))
	nh=$(( ($nh * $growth) / 100))
	
	# Move wid
	IGNOREB=1
	fn_teleportWid "c" "c" "$nw" "$nh" "$wid"
}

# Maximize a window in a given direction
# up	|	north
# right	|	east
# down	|	south
# left	|	west
# horizontal
# vertical
# full
# Arguments: m_dir wid
fn_maxWid() {
	local wid="$2"

	# Get starting geometry
	local nx=$(fn_getAttribute "x" "$wid")
	local ny=$(fn_getAttribute "y" "$wid")
	local nw=$(fn_getAttribute "w" "$wid")
	local nh=$(fn_getAttribute "h" "$wid")
	local bor="$(fn_getAttribute "b" "$wid")"
	[[ "$IGNOREB" -eq 1 ]] && bor=0

	case "$1" in
			"up" | "north")
				nh=$(( $ny + $nh + $bor + $bor ))
				ny="$GY0"
				nx="c"
				nw="c";;
			"right" | "east")
				nw=$(( $GX1 - $nx ))
				nx="c"
				ny="c"
				nh="c";;
			"down" | "south")
				nh=$(( $GY1 - $ny ))
				ny="c"
				nx="c"
				nw="c";;
			"left" | "west")
				nw=$(( $nx + $nw + $bor + $bor ))
				nx="$GX0"
				ny="c"
				nh="c";;
			"horizontal")
				nw=$(( $GX1 - $GX0 ))
				nx="$GX0"
				ny="c"
				nh="c";;
			"vertical")
				nh=$(( $GY1 - $GY0 ))
				ny="$GY0"
				nx="c"
				nw="c";;
			"full" )
				nw=$(( $GX1 - $GX0 ))
				nx="$GX0"
				nh=$(( $GY1 - $GY0 ))
				ny="$GY0";;
			*) echo "$1 is not a valid M_DIR"; exit;;
	esac

	# Move wid
	fn_teleportWid "$nx" "$ny" "$nw" "$nh" "$wid"
}

# Slam a window in a specified direction in specified geometry
# Directions are:
# up		 | north
# right		 | east
# down		 | south
# left		 | west
# upperleft	 | northwest
# upperright | northeast
# lowerleft	 | southwest
# lowerright | southeast
# xcenter	 | hcenter
# ycenter	 | vcenter
# center	 | 
# Arguments: s_dir x0 y0 x1 y1 gap w h wid
fn_slamWidGeometry() {
	#local wid="$7"
	local wid=$9

	# Geometry to use
	local NGX0=$2
	local NGY0=$3
	local NGX1=$4
	local NGY1=$5
	local NGAP=$6

	# Get starting geometry
	#local nx=""
	#local ny=""
	#local nw=$(fn_getAttribute "w" "$wid")
	#local nh=$(fn_getAttribute "h" "$wid")
	local nx=""
	local ny=""
	local nw=$7
	local nh=$8
	local bor="$(fn_getAttribute "b" "$wid")"
	[[ "$IGNOREB" -eq 1 ]] && bor=0

	# Slam the window in the appropriate direction
	case "$1" in
		"up" | "north")
			ny="$NGY0"
			nx="c";;
		"right" | "east")
			nx=$(( $NGX1 - $nw - $NGAP - $NGAP - $bor - $bor ))
			ny="c";;
		"down" | "south")
			ny=$(( $NGY1 - $nh - $NGAP - $NGAP - $bor - $bor ))
			nx="c";;
		"left" | "west")
			nx="$NGX0"
			ny="c";;
		"upperleft"  | "northwest" )
			nx="$NGX0"
			ny="$NGY0";;
		"upperright" | "northeast" )
			nx=$(( $NGX1 - $nw - $NGAP - $NGAP - $bor - $bor ))
			ny="$NGY0";;
		"lowerleft"  | "southwest" )
			nx="$NGX0"
			ny=$(( $NGY1 - $nh - $NGAP - $NGAP - $bor - $bor ));;
		"lowerright" | "southeast" )
			nx=$(( $NGX1 - $nw - $NGAP - $NGAP - $bor - $bor ))
			ny=$(( $NGY1 - $nh - $NGAP - $NGAP - $bor - $bor ));;
		"xcenter" | "hcenter" )
			GAP=0
			local gcx=$(( ( $NGX1 - $NGX0 ) / 2 ))
			gcx=$(( $gcx + $NGX0 ))
			nx=$(( $gcx - ( $nw / 2 ) ));;
		"ycenter" | "vcenter" )
			GAP=0
			local gcy=$(( ( $NGY1 - $NGY0 ) / 2 ))
			gcy=$(( $gcy + $NGY0 ))
			ny=$(( $gcy - ( $nh / 2 ) ));;
		"center" )
			GAP=0
			local gcx=$(( ( $NGX1 - $NGX0 ) / 2 ))
			local gcy=$(( ( $NGY1 - $NGY0 ) / 2 ))
			gcx=$(( $gcx + $NGX0 ))
			gcy=$(( $gcy + $NGY0 ))
			nx=$(( $gcx - ( $nw / 2 ) ))
			ny=$(( $gcy - ( $nh / 2 ) ));;
		*) echo "$1 is not a valid S_DIR";exit;;
	
	esac

	nw="c"
	nh="c"

	# Move wid
	fn_teleportWid "$nx" "$ny" "$nw" "$nh" "$wid"
}

# Slam a window in a specified direction
# S_DIR definition is with fn_slamWidGeometry
# Arguments: s_dir wid
fn_slamWid() {
	local wid="$2"

	# Get starting geometry
	local nw=$(fn_getAttribute "w" "$wid")
	local nh=$(fn_getAttribute "h" "$wid")
	fn_slamWidGeometry $1 $GX0 $GY0 $GX1 $GY1 $GAP $nw $nh $wid
}

# Parse a Grid expression and return the requested variable
# Definition of Grid is with fn_gridWid
# x = x
# y = y
# Arguments: [x|y] grid
fn_parseGrid() {
	local out=""
	# Return x
	if [[ "$1" == "x" ]]; then
		out=$(echo "$2" | cut -d x -f 1)
	# Return y
	elif [[ "$1" == "y" ]]; then
		out=$(echo "$2" | cut -d x -f 2)
	else
		echo "not a valid parse parameter"
		exit
	fi
	echo "$out"
}

# Parse a Position expression and return the requested variable (or interpretation of said variable)
# Definition of Position is with fn_gridWid
# x  = x
# y  = y
# xs = xscale
# ys = yscale
# Arguments: [x|y|xs|ys] position
fn_parsePosition() {
	local out=""
	# Return x
	if [[ "$1" == "x" ]]; then
		out=$(echo "$2" | cut -d , -f 1)
	# Return y
	elif [[ "$1" == "y" ]]; then
		out=$(echo "$2" | cut -d , -f 2 | cut -d _ -f 1 | cut -d + -f 1)
	# Return xs
	# If there is no value in $2 than return 1
	elif [[ "$1" == "xs" ]]; then
		case "$2" in
			*+*) out=$(echo "$2" | cut -d + -f 2 | cut -d , -f 1);;
			*) out=1;;
		esac
	# Return ys
	# If there is no value in $2 than return 1
	elif [[ "$1" == "ys" ]]; then
		case "$2" in
			*+*) out=$(echo "$2" | cut -d + -f 2 | cut -d , -f 2);;
			*) out=1;;
		esac
	else
		echo "not a valid parse parameter"
		exit
	fi
	echo "$out"
}

# Place a window in a specified grid slot
# Note: All windows before the last square have there values floored, the last square will simply reach as far as is left avaliable
# A grid is an ' intxint '
# Example:
# 3x3		creates 9 cells
# A position is an ' int,int ' or ' int,int+int,int '
# Examples:
# 1,2		window placed in middle bottom cell in a 3,3 grid
# 1,0+1,1	window stretches from middle top cell through right middle cell in a 3,3 grid
# Arguments: grid position wid
fn_gridWid() {
	# Set wid
	local wid="$3"

	# Get Grid
	local xgrid=$(fn_parseGrid "x" "$1")
	local ygrid=$(fn_parseGrid "y" "$1")

	# Get position
	local xpos=$(fn_parsePosition "x" "$2")
	local ypos=$(fn_parsePosition "y" "$2")
	local xscale=$(fn_parsePosition "xs" "$2")
	local yscale=$(fn_parsePosition "ys" "$2")

	# Get dimensions for cells
	local xcell=$(( ( $GX1 - $GX0 ) / $xgrid ))
	local ycell=$(( ( $GY1 - $GY0 ) / $ygrid ))

	# Get x and y positions for the set cell
	local nx=$(( ( $xcell * $xpos ) + $GX0 ))
	local ny=$(( ( $ycell * $ypos ) + $GY0 ))

	# If the wid is in the last x cell of the grid, compensate for rounding errors in cell size
	[[ $(( $xpos + $xscale )) -eq $xgrid ]] && local nw=$(( $GX1 - $nx )) || local nw=$(( $xscale * $xcell ))

	# If the wid is in the last y cell of the grid, compensate for rounding errors in cell size
	[[ $(( $ypos + $yscale )) -eq $ygrid ]] && local nh=$(( $GY1 - $ny )) || local nh=$(( $yscale * $ycell ))

	# Move wid
	fn_teleportWid "$nx" "$ny" "$nw" "$nh" "$wid"
}

# Check a parsed position expressions output, if the output was o use the override value
# Definition of Position is with fn_gridWid
# x  = x
# y  = y
# Arguments: [x|y] position override value
fn_checkPosition() {
	local out="$(fn_parsePosition $1 $2)"
	[[ "$out" == "o" ]] && out="$3"
	echo "$out"
}

# Place a list of windows in a grid automatically (can switch behavior or specify specific positions as well)
# Definition of Position and Grid is with fn_gridWid
# A behavior is:
# --x-shift = windows are placed along the x axis, followed by the y axis
# --y-shift = windows are placed along the y axis, followed by the x axis - DEFAULT
# --no-auto = windows are not automatically place, and will use the same coordinates until a new one is given
# Arguments: grid [ behavior position wid | behavior wid | position wid | wid ]
# NOTE: position behavior wid is INVALID INPUT
fn_gridMany() {
	# Get grid
	local xcalcgrid=$(fn_parseGrid "x" "$1")
	local ycalcgrid=$(fn_parseGrid "y" "$1")
	local madegrid="$1"
	shift 1

	# Check to see if the second arg was a behavior
	# If it was than deal with it
	# this needs to be handled differently so that the next check can run properly
	local sorder=0
	if [[ "$1" == "--x-shift" ]]; then
		sorder=1
		shift 1
	elif [[ "$1" == "--y-shift" ]]; then
		sorder=0
		shift 1
	elif [[ "$1" == "--no-auto" ]]; then
		sorder=2
		shift 1
	fi

	# If the arg was a wid than set default position
	local cxpos=$(fn_parsePosition "x" "$1")
	if [[ -z "$fxpos" ]]; then
		cxpos=0
		local cypos=0
	# If arg was a position than set it as the current position
	else
		local cypos=$(fn_parsePosition "y" "$1")
	fi

	# Loop through all remaining args
	while :
	do
		# Reset this value, it stores if a window was moved, and the cxpos and cypos
		local moved=0
		local xshift=1
		local yshift=1
		case "$1" in
			# If the arg was a behavior switches
			"--x-shift" )
				sorder=1
				shift 1;;
			"--y-shift" )
				sorder=0
				shift 1;;
			"--no-auto" )
				sorder=2
				shift 1;;

			# If the arg  was a wid
			0x* )
				# Move window
				moved=1
				fn_gridWid "$madegrid" "$cxpos,$cypos" "$1"
				# Initialize values for update
				shift 1;;
			# If the arg was a position
			*,* )
				# Initialize values for update
				cxpos=$(fn_checkPosition "x" "$1" $cxpos) # Keep using cxpos if o was set
				cypos=$(fn_checkPosition "y" "$1" $cypos) # Keep using cypos if o was set
				xshift=$(fn_parsePosition "xs" "$1")
				yshift=$(fn_parsePosition "ys" "$1")
				# Move window
				moved=1
				fn_gridWid "$madegrid" "$cxpos,$cypos+$xshift,$yshift" "$2"
				shift 2;;
			*) break;;
		esac

		# If a window was moved update the next positon
		if [[ "$moved" -eq 1 ]]; then
			# If --y-next is set than shift on y axis
			if [[ "$sorder" -eq 0 ]]; then
				cypos=$(( $cypos + $yshift ))
				# If reach end, cycle on x
				if [[ "$cypos" -ge "$ycalcgrid" ]]; then
					cypos=0
					cxpos=$(( $cxpos + $xshift ))
					# If reached end, cycle
					[[ "$cxpos" -ge "$xcalcgrid" ]] && cxpos=0
				fi
			# If --x-next is set than shift on y axis
			elif [[ "$sorder" -eq 1 ]]; then
				cxpos=$(( $cxpos + $xshift ))
				# If reach end, cycle on y
				if [[ "$cxpos" -ge "$xcalcgrid" ]]; then
					cxpos=0
					cypos=$(( $cypos + $yshift ))
					# If reach end, cycle
					[[ "$cypos" -ge "$ycalcgrid" ]] && cypos=0
				fi
			# If --no-auto is set, than don't update anything
			#elif [[ "$sorder" -eq 2 ]]; then
			fi
		fi
	done
}

# Alternate the state of MIRROR
# Arguments:
fn_setMirror() {
	[[ $MIRROR -eq 0 ]] && MIRROR=1 || MIRROR=0
}

# Alternate the state of FLIP
# Arguments:
fn_setFlip() {
	[[ $FLIP -eq 0 ]] && FLIP=1 || FLIP=0
}

# Parse a ratio expression and return the requested variable
# Definition of ratio is with fn_tile
# m = master
# t = total
# Arguments: [m|t] ratio
fn_parseRatio() {
	local out=""
	# Return m
	if [[ "$1" == "m" ]]; then
		out=$(echo "$2" | cut -d / -f 1)
	# Return t
	elif [[ "$1" == "t" ]]; then
		out=$(echo "$2" | cut -d / -f 2)
	else
		echo "not a valid parse parameter"
		exit
	fi
	echo "$out"
}

# Take an arbitrary list on windows and tile them in a given pattern
# A ratio is the representation of the master window size to the total monitor size, master/total
# A ratio is a ' int/int '
# Examples:
# 6/10 		master window takes up 6/10 of the screen and sub windows take up 4/10
# A pattern is one of:
# monocle	| max		| m = single window displayed filling all of given area
# rstack	| vstack	| r = main window displayed on the left with the stack on the right
# lstack	| 			| l = main window displayed on the right with the stack on the left
# bstack	| hstack	| b = main window displayed on the top with the stack on the bottom
# tstack	| 			| t = main window displayed on the bottom with the stack on the top
# Arguments: ratio pattern wid...
fn_tile() {
	# Get the ratios
	mratio=$(fn_parseRatio "m" "$1")
	tratio=$(fn_parseRatio "t" "$1")
	shift 1

	# Set the pattern
	pattern="$1"
	shift 1

	# If the pattern is monocle or the list of wids is less than or equal to 1, than use monocle tiling
	if [[ "$pattern" == "monocle" ]] || [[ "$pattern" == "max" ]] || [[ "$pattern" == "m" ]] || [[ "$#" -le 1 ]]; then
		fn_gridMany "1x1" "--no-auto" $@;
	else
		# Set the master
		master="$1"
		shift 1

		# Use appropriate tiling
		case "$pattern" in
			# rstack tiling
			"rstack" | "vstack" | "r" | "lstack" | "l" )
				[[ "$pattern" == "l"* ]] && fn_setMirror

				# Calculate the grid
				shiftmode="--y-shift"
				tilexgrid="$tratio"
				tileygrid="$#"

				# Calculate Master window
				masterpos="0,0+$mratio,$tileygrid"

				# Initialize sub
				subpos0=$mratio
				subpos1="o"
				subpos2=$(( $tratio - $mratio ))
				subpos3="1";;
			"bstack" | "hstack" | "b" | "tstack" | "t" )
				[[ "$pattern" == "t"* ]] && fn_setFlip

				# Calculate the grid
				shiftmode="--x-shift"
				tilexgrid="$#"
				tileygrid="$tratio"

				# Calculate Master window
				masterpos="0,0+$tilexgrid,$mratio"

				# Initialize sub
				subpos0="o"
				subpos1=$mratio
				subpos2="1"
				subpos3=$(( $tratio - $mratio ));;
			*) echo "$pattern is no a valid pattern"; exit;;
		esac
		# Loop through all subs and give them the appropriate
		sub=""
		while :
		do
			case "$1" in
				0x* )
					# Calculate the position for this sub
					subpos="$subpos0,$subpos1+$subpos2,$subpos3"
					sub="$sub$subpos $1 "
					shift 1;;
				* ) break;;
			esac
		done
		tilegrid="$(echo $tilexgrid)x$tileygrid"
		fn_gridMany "$tilegrid" "$shiftmode" "$masterpos" "$master" $sub
	fi
}

# Print Usage information
# Arguments:
fn_usage() {
	echo "Usage: placemaker [SETTINGS] [MODE]"
	echo "Place windows at specified positions throughout a geometry."
	echo ""
	echo "SETTINGS"
	echo "  --autosave [ATOM]		autosave windows in an atom"
	echo "  --flip			flip the y placement of windows"
	echo "  --gap GAP			specify gap between geometry and WID"
	echo "  --geometry X0 Y0 X1 Y1	specify placement bounds"
	echo "  --ignore-bor			don't adjust position with 'wattr b WID'"
	echo "  --mirror			mirror the x placement of windows"
	echo "  --print			window adjustments only printed to stdout"
	echo "  --quiet			window adjustments not printed to stdout"
	echo ""
	echo "  -h, --help			display this help text"
	echo ""
	echo "MODE"
	echo "  -G, --grid GRID POSITION WIDS	place windows in a grid cells"
	echo "  -L, --scale PERCENT WID	scale a windows size"
	echo "  -M, --max M_DIR WID 		maximize a windows in a given dimension"
	echo "  -P, --place X Y W H WID	place windows in a given position"
	echo "  -R, --restore WID		restore a windows position"
	echo "  -S, --slam S_DIR WID		send a window in a direction"
	echo "  -T, --tile RATIO PATTERN WIDS	place windows using a pattern"
	echo "  -V, --save [ATOM] WID		save a windows position"
	echo ""
	echo "  -I, --internal CMD		call an internal function"
}

while :
do
	case "$1" in
		"-h" | "--help" )
			fn_usage
			exit;;
		"--autosave")
			AUTOSAVE=1
			if [[ "$2" != "-"* ]]; then
				SAVE="$2"
				shift 2
			else
				shift 1
			fi;;
		"--flip" )
			fn_setFlip
			shift 1;;
		"--gap" )
			GAP=$2
			shift 2;;
		"--geometry" )
			fn_geometry $2 $3 $4 $5
			shift 5;;
		"--ignore-bor" )
			IGNOREB=1
			shift 1;;
		"--mirror" )
			fn_setMirror
			shift 1;;
		"--print" )
			PRINT=1
			shift 1;;
		"--quiet" )
			QUIET=1
			shift 1;;
		"-G" | "--grid" )
			shift 1
			fn_gridMany $@
			exit;;
		"-L" | "--scale" )
			shift 1
			fn_scaleWid $@
			exit;;
		"-M" | "--max" )
			shift 1
			fn_maxWid $@
			exit;;
		"-P" | "--place" )
			shift 1
			fn_teleportWid $@
			exit;;
		"-R" | "--restore" )
			shift 1
			fn_restoreWid $@
			exit;;
		"-S" | "--slam" )
			shift 1
			fn_slamWid $@
			exit;;
		"-T" | "--tile" )
			shift 1
			fn_tile $@
			exit;;
		"-V" | "--save" )
			shift 1
			fn_saveWid $@
			exit;;
		"-I" | "--internal" )
			shift 1
			eval "fn_"$@
			exit;;
		*) break;;
	esac
done
